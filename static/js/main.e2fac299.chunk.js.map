{"version":3,"sources":["components/App.module.styl","components/Header.js","constants/Constants.js","components/SocialMediaLink.js","icons/GithubIcon.js","components/App.js","serviceWorker.js","index.js","components/SocialMediaLink.module.styl","components/Header.module.styl"],"names":["module","exports","main","app","Header","react_default","a","createElement","className","styles","headerText","Component","SocialMediaLink","Icon","this","props","icon","container","iconWrapper","href","link","text","GithubIcon","_ref","_ref$style","style","_ref$width","width","_ref$className","_ref$height","height","_ref$viewBox","viewBox","xmlns","id","d","App","components_Header","components_SocialMediaLink","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,KAAA,eAAAC,IAAA,+MCSHC,mLAJX,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOC,YCNd,sBDICC,6BEoBNC,mLAdX,IAAMC,EAAOC,KAAKC,MAAMC,KACxB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOQ,WACrBZ,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAOS,YAAaC,KAAML,KAAKC,MAAMI,MACjDd,EAAAC,EAAAC,cAACM,EAAD,CAAML,UAAWC,IAAOO,QAE1BX,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAOW,KAAMD,KAAML,KAAKC,MAAMI,MACzCL,KAAKC,MAAMM,cATQV,aCOfW,EAbI,SAAAC,GAAA,IAAAC,EAAAD,EAAEE,aAAF,IAAAD,EAAU,GAAVA,EAAAE,EAAAH,EAAcI,aAAd,IAAAD,EAAsB,OAAtBA,EAAAE,EAAAL,EAA8Bf,iBAA9B,IAAAoB,EAA0C,GAA1CA,EAAAC,EAAAN,EAA8CO,cAA9C,IAAAD,EAAuD,OAAvDA,EAAAE,EAAAR,EAA+DS,eAA/D,IAAAD,EAAyE,YAAzEA,EAAA,OACjB1B,EAAAC,EAAAC,cAAA,OACEoB,MAAOA,EACPF,MAAOA,EACPK,OAAQA,EACRE,QAASA,EACTxB,UAAWA,EACXyB,MAAM,8BACN5B,EAAAC,EAAAC,cAAA,SAAO2B,GAAG,2BAAV,eACA7B,EAAAC,EAAAC,cAAA,QAAM4B,EAAE,guBCMGC,mLATX,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOP,MACrBG,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAiBjB,KAAK,SAASF,KAAK,8BAA8BH,KAAMM,YAL9DX,aCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBtD,EAAAC,QAAA,CAAkBgB,UAAA,oBAAAG,KAAA,eAAAF,YAAA,sBAAAF,KAAA,mCCAlBhB,EAAAC,QAAA,CAAkBS,WAAA","file":"static/js/main.e2fac299.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"main___2PhfI\",\"app\":\"app___235SR\"};","import React, {Component} from 'react';\nimport styles from './Header.module.styl';\nimport {NAME} from '../constants/Constants';\n\nclass Header extends Component {\n  render() {\n    return <div className={styles.headerText}>{NAME}</div>;\n  }\n}\n\nexport default Header;\n","export const NAME = 'Andy Garron';\n","import React, {Component} from 'react';\nimport styles from './SocialMediaLink.module.styl';\n\ntype Props = {\n  text: string,\n  href: string,\n  icon: Component,\n};\nclass SocialMediaLink extends Component<Props> {\n  render() {\n    const Icon = this.props.icon;\n    return (\n      <div className={styles.container}>\n        <a className={styles.iconWrapper} href={this.props.href}>\n          <Icon className={styles.icon} />\n        </a>\n        <a className={styles.link} href={this.props.href}>\n          {this.props.text}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default SocialMediaLink;\n","import React from 'react';\n\nconst GithubIcon = ({style = {}, width = '100%', className = '', height = '100%', viewBox = '0 0 24 24'}) => (\n  <svg\n    width={width}\n    style={style}\n    height={height}\n    viewBox={viewBox}\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <title id=\"simpleicons-github-icon\">GitHub icon</title>\n    <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n  </svg>\n);\n\nexport default GithubIcon;\n","import React, {Component} from 'react';\nimport Header from './Header';\nimport SocialMediaLink from './SocialMediaLink';\nimport GithubIcon from '../icons/GithubIcon';\nimport styles from './App.module.styl';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={styles.main}>\n        <Header />\n        <SocialMediaLink text=\"Github\" href=\"https://github.com/angarron\" icon={GithubIcon} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container___kvVbl\",\"link\":\"link___36G1u\",\"iconWrapper\":\"iconWrapper___3-v_G\",\"icon\":\"icon___283b9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerText\":\"headerText___21QP4\"};"],"sourceRoot":""}